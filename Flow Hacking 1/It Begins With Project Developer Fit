Real Life Learning Hacks For And By Devs In Oslo. Life&Work Hacking In Oslo is Ola Vea's newsletter on learning react, visual thinking, parenthood, dev recruiting and the tips to help you stay creatively learning at work! And hacking at home.
<Ola>
Todays Quick Tip: ...
Hi! Ola is back! How do I start ...ing?
I like to 
Why? To ...
What is it not? I am not looking f... Not yet. Enough about me, how do you ...?
Here Are Six Quick Questions
You will automagically find yourself inside my typeform questionaire if you click for example "6" on this first question:
<typeform>


Flow Hacking For IT-Developers
Let us assume the purpose of your project is to get you into flow, 


Step 1
It Begins With Project Developer Fit 
Make 
something good devs want to work on.  —PAUL GRAHAM 

–what would you need more of? 1. thing!
–what would you need less of? 1. thing!

You know what the single worst flow hacking decision you can make is? Working with a project no good dev gets into flow working on. 

Yet for years, this was a scenario that developers tolerated and accepted as part of the job. We all told ourselves that “you work on the project you have, not the one you want.” And then we wondered why our strategies failed— and why those failures were so expensive. What attracted me to flow hacking from the very start was that it rejects this obviously flawed approach outright.

Flow hackers believe that projects— even whole businesses and business models— can and should be changed until they are primed to generate flow from the it-developers who work on them. In other words, the best flow hacking decision you can make is to have a project or business that fulfills your real and compelling flow needs for the team— no matter how much tweaking and refining this takes.

Take…Today…But back in…The team…. But The team wanted more
Some teams like … and … spend a long time trying new iterations until they achieve what flow hackers call Project Developer Fit (PDF);


The end goal is the same, however, and it’s to have the project and its developers in perfect sync with each other. Eric Ries, author of The Lean Startup, explains that the best way to get to Product Developer Fit is by starting up a “minimum viable projecct” and improving it based on feedback from developers— as opposed to what most of us do, which is try to launch what

we think is our final, perfected project. Today, it is the developer’s job as much as anyone else’s to make sure Product Developer Fit happens. Your developing efforts are wasted on a mediocre project— so don’t tolerate mediocrity. OK? But rather than waiting for it to happen magically or assuming that this is some other person’s job, developers need to contribute to this process. Isolating what your flow triggers are, figuring out your teams flow needs, designing a project that will flow your minds— these are developer decisions, not just project management and top leadership choices. The imperative is clear: stop sitting on your hands and start getting them dirty. Optimizing a project to flow and be well received by developers, by users, by the media, and by influencers is something that you, as a developer and a flow hacker, are uniquely qualified to do. You are, in effect, the translator who helps bridge the producers and the consumers so they are in alignment.

And this is true whether you’re making some physical gadget, designing a menu, or creating an app. Someone has to be the advocate for the developers, and the earlier their influence is felt in the process, the better.

Amazon encourages their project leaders to think like Oprah–that is, would she rapturously shout about this project if she were giving it away to her developer fans as a gift? The exercise forces the team to focus on exactly what its potential new project is and what’s special about it. I guarantee that someone with a mind that bends toward flow hacking put this policy into place. No longer content to let the development happen as it happens, we can influence it with input, with rules and guidelines, and with feedback. The flow hacker helps with iterations, advises, and analyzes every facet of the project. In other words, Project Developer Fit is a feeling backed with data and information. HOW DO YOU GET PDF? Because Project Developer Fit can be overwhelming as a technical business concept, allow me to explain it by dropping


—Olas story about this 
the jargon and presenting an analogy. As it turns out, I was familiar with PMF long before I read Andrew Chen’s article. Much of the marketing I do is with authors and books. I’ve worked with dozens of bestsellers in the last five years— and, of course, I’ve also worked on many books that weren’t successful. In my experience, the books that tend to flop upon release are those where the author goes into a cave for a year to write it, then hands it off to the publisher for release. They hope for a hit that rarely comes. On the other hand, I have clients who blog extensively before publishing. They develop their book ideas based on the themes that they naturally gravitate toward but that also get the greatest response from readers. (One client sold a book proposal using a screenshot of Google queries to his site.) They test the ideas they’re writing about in the book on their blog and when they speak in front of groups. They ask readers what they’d like to see in the book. They judge topic ideas by how many comments a given post generates, by how many Facebook “shares” an article gets. They put potential title and cover ideas up online to test and receive feedback. They look to see what hot topics other influential bloggers are riding and find ways of addressing them in their book.* The latter achieves PMF; the former never does. One is growth hacking; the other, simply guessing. One is easy for me to market. The other is often a lost cause. One needs only a small shove to get going. The other has a strong headwind every step of the way. Amazon, for its part, has a couple of other easy suggestions for you if the advice “write a hypothetical press release” doesn’t quite work for your situation. Their CTO, Werner Vogels, suggests trying to write an FAQ for this product you’re developing. (That way you can address, in advance, potential user issues and questions.) 9 Or try to define the crucial parts of the user experience by making mockups of pages, writing hypothetical case studies so you can actually start to see what it would look like and who it would work for and how. Finally, try writing the user manual, which as Werner explains usually has three parts: concepts, how-to, and reference. (Defining these means you understand your idea in and out from the customers perspective. Also, he says, if you have more than one type of user then write multiple manuals.) I love those ideas. They might feel like homework, but they force you to imagine your product from someone’s perspective other than your own. That’s the best way to get to PMF— because ultimately this isn’t about you; it’s about the people you’re trying to turn into customers. Perhaps you’ll get to PMF with one aha moment like Instagram, or it may be incremental 1 percent improvements. 


As Marc Andreessen— the entrepreneur behind Netscape, Opsware, and Ning who, in addition to running a major venture capital fund, happens to be on the board of directors for Facebook, eBay, and HP— explains it, companies need to 
“do whatever is required to get to project/ Developer fit. Including changing out people, rewriting your project, 

(moving into a different market, telling customers no when you don’t want to, telling customers yes when you don’t want to, raising that fourth round of highly dilutive venture capital— whatever is required.” 10 : http://web.stanford.edu/class/ee204/ProductMarketFit.html )

In other words: everything is now on the table. 

OPEN UP TO FEEDBACK 
(Part of this new approach is having the humility to accept that project leaders are not necessarily the most critical members of the team. It’s true. Sometimes the best thing project leaders can do is to not let developers get distracted by “project leading” for a minute. Sometimes the outward-facing part of the job is exactly the least important part. Take Evernote, a start-up that offers productivity and organization software, which made the companywide decision to delay spending even a penny on marketing for the first several years of its growth. )

As Evernote’s founder, Phil Libin, told a group of entrepreneurs in a now-classic talk, “People [who are] thinking about things other than making the best project, never make the best project.” So Evernote took “marketing” off the table and instead poured that budget into project development. This undoubtedly slowed brand building at first— but it paid off. Why? Because Evernote is far and away the most superior productivity and note-taking application on the planet. Today, it practically markets itself. Perhaps this is what you need to do. I know you’re probably reading this book looking for some immediate tips you can put into action— places you can deploy your budget or resources. But let’s think outside the box— outside the budget— and consider whether improving your project might be the best strategy. 


(That’s not to say you shouldn’t do anything at all. Evernote still came up with a bunch of clever tricks to get people to see its products while marketing was on their strategic back burner. After hearing customers complain that their bosses were suspicious of employees using their laptops in meetings, the Evernote team produced stickers that said, “I’m not being rude. I’m taking notes in Evernote.” Thus, their most loyal customers were turning into billboards that went from meeting to meeting. )

Once we stop thinking of the projects we develop as static— that our job as developers is to simply work with what we’ve got instead of working on and improving what we’ve got— the whole game changes. Now we are not helpless, repeatedly developers on a project 

(to reporters and users) 

that is not getting us into flow. Instead, we use this information to improve the project, with the idea of ultimately refining our idea into something that can in many ways 

(sell itself.) 

The race has changed. 

(The prize and spoils no longer go to the person who makes it to market first. )

They go to the person who makes it to Project Developer Fit first. Because once you get there, your recruting efforts become like a spark applied to a bed of kindling soaked in kerosene. The old way? It’s striking a match . . . and hoping it starts a fire somewhere. The point is: recruting as we know it is a waste of time without PDF. Of course, there are many tools to help get you there. 

(From Google to Optimizely to KISSmetrics, there are great services that allow you to see what your users are actually doing and responding to on your site. This insight will get you closer to a fit than gut instincts ever will. )


But the most effective method is simply the Socratic method. We must simply and repeatedly question every assumption. Who is this project for? Why would they develop it? Why do I develop it? Ask your leaders questions, too: What is it that brought you to this project? What is holding you back from referring other people to it? What’s missing? What’s golden? Don’t ask random people or your friends— be scientific about it. Use tools like SurveyMonkey, Wufoo, Qualaroo, or even Google Docs, which make it very easy to offer surveys to some or all of your developers. 

(For the first time) 
we can ask these questions because we intend to do something about it. No more privately complaining to friends, coworkers, and spouses that we’re stuck with a project nobody wants. Not to say that you must use all the data that comes back, but you should have it. 

(The black-box approach is no longer necessary.)

 Change is possible— which means you need to make yourself available and open to it. Project Developer Fit is not some mythical status that happens accidentally. Companies work for it; they crawl toward it. They’re ready to throw out weeks or months of work because the evidence supports that decision. The projects as their developers know them now are fundamentally different from what they were 

(at launch—) 

before they had Project Developer Fit. But once these companies get PDF, they don’t just wait and hope that success will come along on its own. The next step is to bring the developers in.





——
Yet
wants to work on



Få en feilansatt som lager feil du må rette opp
Marketing a project no good dev wants to work on

Make sure the project is something good devs want to work on->Hvilke justeringer må du gjøre?


You know what the single worst flow hacking decision you can make is? 
Få en feilansatt som lager feil du må rette opp
Marketing a project no good dev wants to work on. Write down some bullet points about the type of developer you want to recruit. Make som guesses about some bullet points about the type of project that type of developer would want to work on.
<no project for good devs>
hvis prosjektet ditt faktisk passer
forklar hva slags type utvikler du er ute etter.
forklar hvorfor dette prosjketet passer for den type utvikler
holdninger

Step 2
Finding Your Recruitment Hack
To be successful RECRUTING, you must match the way you market your proJEcts with the way your prospects learn about and LOOK for your proJEcts.  —BRIAN HALLIGAN, FOUNDER OF HUBSPOT
Step 3
Turn 1 Into 2 And 2 Into 3–...Dugnad
Face to face. SMS
SJEKKLISTE
–Fair
–DeBio
GODE EKSEMPLER
Godt eksempel på vellykket kampanje for å få folk til å sykle (Vegvesenet)
Sett i gang samkjøring ved hjelp av appen GoMore (GoMore)
RESSURSER
Godt eksempel på vellykket kampanje for å få folk til å sykle (Vegvesenet)
Sett i gang samkjøring ved hjelp av appen GoMore (GoMore)
Med Hilsen,
Ola
P.S. Jeg vil veldig gjerne høre om hva du har ... 
Jeg håper at du svarer på spørreundersøkelsen øverst, fordi ...
Life & Work Hacking For Devs in Oslo
–The work-life-capital-of-Northern-Europe
<B, L, O>
I have been learning react since 2016 with the mentoring of My Life&Work Partner the Cutting Edge Web App Maker Benedicte Raae. Our daughter Lillian (3) has grown since this photo was taken by my brother from another mother Chris Fernando back in 2017
<bilder>
